package ru.cytogen.icbraindb

import com.fasterxml.jackson.databind.ObjectMapper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.test.context.ContextConfiguration
import org.springframework.test.context.junit.jupiter.SpringExtension
import ru.cytogen.icbraindb.config.JacksonConfiguration
import ru.cytogen.icbraindb.filter.service.SortParser
import ru.cytogen.icbraindb.model.dto.mutation.MutationSortColumn

@ExtendWith(SpringExtension::class)
@ContextConfiguration(classes = [JacksonConfiguration::class])
class IcbraindbApplicationTests {

    @Autowired
    private lateinit var mapper: ObjectMapper

    @Test
    fun contextLoads() {
        SortParser.getSortScheme(MutationSortColumn::class)
    }

    @Test
    fun testIS() {
        print(listOf(140,243,341,470,504,587,689,766,775,814,936,944,1094,1187,1197,1245,1318,1340,1354,1553,1640,1645,1659,1662,1724,1903,1912,1972,1991,1999,2009,2012,2035,2043,2062,2084,2099,2105,2108,2120,2146,2152,2155,2166,2172,2198,2232,2251,2264,2301,2309,2381,2386,2447,2488,2494,2500,2550,2616,2634,2695,2731,2765,2815,2880,2888,2988,3019,3099,3117,3135,3136,3143,3435,3470,3498,3533,3539,3740,3796,3799,3902,3966,4068,4071,4265,4281,4299,4414,4464,4488,4522,4531,4572,4630,4707,4783,4806,4813,4899,4920,4939,4958,5019,5025,5051,5119,5219,5248,5283,5319,5339,5376,5401,5413,5444,5467,5471,5507,5516,5521,5527,5562,5564,5593,5605,5634,5705,5861,5865,5869,5974,5993,5994,5997,6001,6025,6031,6073,6074,6097,6147,6190,6259,6275,6290,6308,6316,6322,6350,6363,6364,6379,6426,6479,6485,6573,6712,6732,6737,6739,6758,6779,6796,6961,6968,6975,6989,7091,7093,7104,7109,7132,7193,7243,7292,7314,7339,7342,7400,7406,7437,7453,7469,7520,7535,7598,7614,7649,7667,7695,7758,7831,7834,7850,7879,7964,7968,8029,8048,8094,8102,8106,8117,8145,8215,8239,8283,8307,8320,8358,8398,8590,8652,8679,8680,8720,8749,8751,8792,8826,8833,8862,8872,8910,8956,9001,9008,9063,9095,9120,9125,9239,9268,9315,9390,9405,9413,9414,9491,9567,9571,9611,9615,9619,9639,9653,9672,9697,9753,9757,9758,9780,9789,9793,9807,9813,9820,9857,9863,9868,9876,9889,9911,9933,9940,10009,10047,10074,10135,10201,10264,10338,10341,10348,10406,10407,10480,10491,10519,10545,10602,10634,10675,10684,10708,10782,10843,10846,10908,10926,10960,11010,11037,11053,11061,11072,11073,11085,11128,11135,11143,11167,11266,11332,11351,11394,11419,11462,11494,11501,11539,11599,11612,11624,11637,11647,11672,11705,11714,11717,11753,11777,11837,11886,11905,11938,12035,12036,12087,12102,12135,12149,12208,12216,12279,12382,12494,12531,12532,12544,12569,12641,12707,12808,12940,12961,13013,13041,13048,13072,13096,13120,13134,13229,13379,13462,13463,13539,13587,13609,13628,13649,13659,13782,13826)
            .mapIndexed {index, it ->
                """case
           when exists(select 1
                       from human_mutations hm
                       where hm.human = h.human
                         and hm.snp_id in (select snp_id from target_snps limit 1 offset ${index})) then true
           else false end as is_${it}"""
            }.joinToString())
    }

}
